[{"/home/gregorio/Documents/projects/netflixclone/src/index.js":"1","/home/gregorio/Documents/projects/netflixclone/src/App.js":"2","/home/gregorio/Documents/projects/netflixclone/src/Tmdb.js":"3","/home/gregorio/Documents/projects/netflixclone/src/components/MovieRow.js":"4","/home/gregorio/Documents/projects/netflixclone/src/components/FeaturedMovie.js":"5","/home/gregorio/Documents/projects/netflixclone/src/components/Header.js":"6"},{"size":199,"mtime":1608840215807,"results":"7","hashOfConfig":"8"},{"size":2107,"mtime":1609257253768,"results":"9","hashOfConfig":"8"},{"size":2526,"mtime":1609194856942,"results":"10","hashOfConfig":"8"},{"size":1719,"mtime":1609257380309,"results":"11","hashOfConfig":"8"},{"size":1803,"mtime":1609258057644,"results":"12","hashOfConfig":"8"},{"size":635,"mtime":1609258979049,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1mbzect",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/gregorio/Documents/projects/netflixclone/src/index.js",[],["31","32"],"/home/gregorio/Documents/projects/netflixclone/src/App.js",["33"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // All data\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n      console.log(list);\n\n      // Spotlight movie\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n\n  return(\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && \n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito por Matheus Gregório com o auxílio de Boenieky Lacerda<br/>\n        Direitos de imagem para Netflix. Site feito para estudo.<br/>\n        Dados obtidos por themoviedb.org<br/>\n      </footer>\n      {movieList.length <= 0 && \n        <div className=\"loading\">\n            <img src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_2560%2Cc_limit/Netflix_LoadTime.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>\n  );\n}","/home/gregorio/Documents/projects/netflixclone/src/Tmdb.js",["34"],"const API_KEY = '79e755c2d3c53f2e426c8e32117b7c5c';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais da Netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genre=28?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genre=35?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genre=27?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genre=10749?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentário',\n                items: await basicFetch(`/discover/movie?with_genre=99?language=pt-BR&api_key=${API_KEY}`)\n            }\n        ];\n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n        if(movieId) {\n            switch(type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default:\n                    info = null;\n                break\n            }\n        }\n        return info;\n    }\n}","/home/gregorio/Documents/projects/netflixclone/src/components/MovieRow.js",["35"],"import React, { useState } from 'react';\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({title, items}) => {\n    const [scrollX, setScrollX] = useState(0);\n    const handleLeftArrow =() => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if(x > 0) {\n            x = 0;\n        }\n        setScrollX(x);\n    }\n    const handleRightArrow =() => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let listW = items.results.length * 150;\n        if((window.innerWidth - listW) > x) {\n            x = (window.innerWidth - listW) - 60;\n        }\n        setScrollX(x);\n    }\n    return(\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{fontSize: 50}} /> \n            </div>\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\n                <NavigateNextIcon style={{fontSize: 50}} />\n            </div>\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key)=>(\n                        <div className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}","/home/gregorio/Documents/projects/netflixclone/src/components/FeaturedMovie.js",["36"],"import React from 'react';\nimport './FeaturedMovie.css';\n\nexport default ({item}) => {\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n    for(let i in item.genres) {\n        genres.push(item.genres[i].name)\n    }\n    let description = item.overview;\n    if(description.length > 200) {\n        description = description.substring(0, 200) + '...'\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">\n                        {item.original_name}\n                    </div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? \"s\" : \"\"}</div>\n                    </div>\n                    <div className=\"featured--description\">{description}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\n                    </div>\n                    <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    );\n}","/home/gregorio/Documents/projects/netflixclone/src/components/Header.js",["37","38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":9,"column":1,"nodeType":"46","endLine":74,"endColumn":2},{"ruleId":"44","severity":1,"message":"47","line":10,"column":1,"nodeType":"46","endLine":72,"endColumn":2},{"ruleId":"44","severity":1,"message":"45","line":6,"column":1,"nodeType":"46","endLine":46,"endColumn":2},{"ruleId":"44","severity":1,"message":"45","line":4,"column":1,"nodeType":"46","endLine":41,"endColumn":2},{"ruleId":"44","severity":1,"message":"45","line":4,"column":1,"nodeType":"46","endLine":19,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":8,"column":17,"nodeType":"50","endLine":8,"endColumn":28},{"ruleId":"48","severity":1,"message":"49","line":13,"column":17,"nodeType":"50","endLine":13,"endColumn":28},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]